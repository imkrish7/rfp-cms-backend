generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  id        String   @id @default(uuid())
  name      String
  logo      String?
  bio       String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  rfps      Rfp[]

  @@map("organisations")
}

model User {
  id                    String   @id @default(uuid())
  email                 String   @unique
  password              String
  role                  Role
  orgId                 String?
  org                   Org?     @relation(fields: [orgId], references: [id])
  department            String?
  vendorId              String?
  vendor                Vendor?  @relation(fields: [vendorId], references: [id])
  isActivated           Boolean  @default(false)
  emailVerificationCode String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("users")
}

model Vendor {
  id               String     @id @default(uuid())
  name             String
  bio              String
  website          String?
  logo             String?
  contactPerson    String
  contactEmail     String
  gstin            String
  businessCategory String
  users            User[]
  proposals        Proposal[]
  contracts        Contract[]

  @@map("vendors")
}

model Rfp {
  id                 String         @id @default(uuid())
  orgId              String
  org                Org            @relation(fields: [orgId], references: [id])
  title              String
  issuedBy           String
  issuedDate         DateTime
  scopeOfWork        String
  timeline           Json
  evaluationCriteria String
  deliverables       String
  description        String
  deadline           DateTime
  attachments        Attachment[]
  status             RFPStatus      @default(DRAFT)
  proposalLimit      Int?
  proposals          Proposal[]
  contracts          Contract[]
  embeddings         RFPEmbedding[]
  isRFPProcessed     Boolean
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@map("rfps")
}

model Proposal {
  id          String              @id @default(uuid())
  rfpId       String
  rfp         Rfp                 @relation(fields: [rfpId], references: [id])
  vendorId    String
  vendor      Vendor              @relation(fields: [vendorId], references: [id])
  cost        Decimal             @db.Decimal(12, 2)
  description String
  title       String
  attachments Attachment[]
  embeddings  ProposalEmbedding[]
  score       Float?
  status      ProposalStatus      @default(UNDER_REVIEW)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("proposals")
}

model Contract {
  id          String         @id @default(uuid())
  rfpId       String
  rfp         Rfp            @relation(fields: [rfpId], references: [id])
  vendorId    String
  vendor      Vendor         @relation(fields: [vendorId], references: [id])
  status      ContractStatus @default(DRAFT)
  body        String
  attachments Attachment[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("contracts")
}

model Attachment {
  id           String           @id @default(uuid())
  rfpId        String?
  rfp          Rfp?             @relation(fields: [rfpId], references: [id])
  proposalId   String?
  proposal     Proposal?        @relation(fields: [proposalId], references: [id])
  contractId   String?
  contract     Contract?        @relation(fields: [contractId], references: [id])
  filename     String
  fileurl      String
  filetype     String
  objectPath   String
  size         Int
  fileId       String
  status       AttachmentStatus
  associatedTo AssociatedTo
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("attachments")
}

model RFPEmbedding {
  id        String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rfpId     String
  rfp       Rfp                   @relation(fields: [rfpId], references: [id])
  content   String
  metadata  Json?
  embedding Unsupported("vector")
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model ProposalEmbedding {
  id         String                @id @default(uuid())
  proposalId String
  proposal   Proposal              @relation(fields: [proposalId], references: [id])
  content    String
  metadata   Json?
  embedding  Unsupported("vector")
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model RFPTalk {
  id        String   @id @default(uuid())
  rfpId     String
  vendorId  String
  threadId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AttachmentStatus {
  PENDING
  UPLOADED
  FAILED
}

enum AssociatedTo {
  RFP
  CONTRACT
  PROPOSAL
}

enum Role {
  ADMIN
  PROCUREMENT
  LEGAL
  VENDOR
}

enum ContractStatus {
  DRAFT
  NEGOTIATION
  SIGNED
}

enum ProposalStatus {
  DRAFT
  RESUBMIT
  SUBMITTED
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum RFPStatus {
  DRAFT
  PUBLISHED
  RESPONSE_SUBMITED
  UNDER_REVIEW
  APPROVED
  REJECTED
  ARCHIEVED
}
